package mapreduce

import (
	"hash/fnv"
    "fmt"
    "os"
    "io/ioutil"
    "encoding/json"
)

func echeck(e error) {
    if e != nil {
        panic(e)
    }
}

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	//
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
    fmt.Fprintf(os.Stderr, "MAPPER %d processing file %s for %d reducers\n", mapTaskNumber, inFile, nReduce)
    // call mapper function on input
    content, err := ioutil.ReadFile(inFile)
    echeck(err)
    key_value_pairs := mapF(inFile, string(content))
    encoders := make([]*json.Encoder, 0, nReduce)
    writers := make([]*os.File, 0, nReduce)
    // prepare output for reducers
    for r := 0; r < nReduce; r++ {
        w, err := os.OpenFile(
                   reduceName(jobName, mapTaskNumber, r),
                   os.O_RDWR | os.O_CREATE | os.O_TRUNC,
                   0777)
        echeck(err)
        writers = append(writers, w)
        enc := json.NewEncoder(w)
        encoders = append(encoders, enc)
    }
    // partition output by key
    parts := make([][]KeyValue, nReduce)
    for i := 0; i < nReduce; i++ {
        parts[i] = make([]KeyValue, 0, len(key_value_pairs) / nReduce * 2)
    }
    for _, kv := range key_value_pairs {
        hash := ihash(kv.Key) % nReduce
        parts[hash] = append(parts[hash], kv)
    }
    for _, part := range parts {
        fmt.Fprintf(os.Stderr, "got %d key value pairs out of mapF\n", len(part))
    }
    // serialize to output files
    for r := 0; r < nReduce; r++ {
        for i, kv := range parts[r] {
            echeck(encoders[r].Encode(&kv))
            if (i + 1) % 10000 == 0 {
                fmt.Fprintf(os.Stderr, "Encode()'ed %d key value pairs\n", i)
            }
        }
    }
    // sync and close output files
    for _, w := range writers {
        err = w.Sync()
        echeck(err)
        stat, _ := w.Stat()
        fmt.Fprintf(os.Stderr, "got %d bytes in output file\n", stat.Size())
        w.Close()
    }

}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
