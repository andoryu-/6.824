package main

import "os"
import "fmt"
import "mapreduce"
import "strconv"
import "sort"
import "strings"
import "unicode"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
    kv_pairs := make([]mapreduce.KeyValue, 0, 11)
    length := len(value)

    if length < 1 {
        return kv_pairs
    }

    for i := 0; i < length; i++ {
        if !unicode.IsLetter(rune(value[i])) {
            continue
        }
        j := i
        for i < length && unicode.IsLetter(rune(value[i])) {
            i++
        }
        if i != j {
            word := value[j : i]
            kv_pairs = append(kv_pairs, mapreduce.KeyValue{string(word), document})
            //fmt.Printf("cut %s\n", string(word))
        }
    }

    return kv_pairs
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
    var b strings.Builder
    b.WriteString(strconv.Itoa(len(values)))
    b.WriteRune(' ')
    sort.Sort(ByString(values))
    j := 0
    for i := 1; i < len(values); i++ {
        if values[i] != values[j] {
            b.WriteString(values[j])
            b.WriteRune(' ')
            j = i
        }
    }
    b.WriteString(values[len(values) - 1])
    return b.String()
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}

type ByString []string
func (a ByString) Len() int { return len(a) }
func (a ByString) Less(i, j int) bool { return a[i] < a[j] }
func (a ByString) Swap(i, j int) { a[i], a[j] = a[j], a[i] }
